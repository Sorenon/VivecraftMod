--- a/net/minecraft/world/entity/vehicle/Boat.java
+++ b/net/minecraft/world/entity/vehicle/Boat.java
@@ -4,6 +4,7 @@
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
+import net.minecraft.client.Minecraft;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -47,6 +48,7 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 
 public class Boat extends Entity
 {
@@ -600,7 +602,15 @@
 
                             if (!(blockstate.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(blockstate.getCollisionShape(this.level, blockpos$mutableblockpos).move((double)l1, (double)k2, (double)i2), voxelshape, BooleanOp.AND))
                             {
-                                f += blockstate.getBlock().getFriction();
+                                if (Reflector.IForgeBlockState_getSlipperiness.exists())
+                                {
+                                    f += Reflector.callFloat(blockstate, Reflector.IForgeBlockState_getSlipperiness, this.level, blockpos$mutableblockpos, this);
+                                }
+                                else
+                                {
+                                    f += blockstate.getBlock().getFriction();
+                                }
+
                                 ++k1;
                             }
                         }
@@ -749,17 +759,22 @@
         if (this.isVehicle())
         {
             float f = 0.0F;
+            
+            //Vivecraft analog movement
+            Minecraft minecraft = Minecraft.getInstance();
+            float f1 = minecraft.player.input.leftImpulse;
 
             if (this.inputLeft)
             {
-                --this.deltaRotation;
+                this.deltaRotation -= f1;
             }
 
             if (this.inputRight)
             {
-                ++this.deltaRotation;
+                this.deltaRotation -= f1;
             }
-
+            //
+            
             if (this.inputRight != this.inputLeft && !this.inputUp && !this.inputDown)
             {
                 f += 0.005F;
@@ -777,7 +792,84 @@
                 f -= 0.005F;
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().add((double)(Mth.sin(-this.getYRot() * ((float)Math.PI / 180F)) * f), 0.0D, (double)(Mth.cos(this.getYRot() * ((float)Math.PI / 180F)) * f)));
+			double mx, mz;
+
+    		if(this.inputUp && !dataholder.vrSettings.seated){
+    			//controller-based
+    			float yaw = minecraft.vrPlayer.vrdata_world_pre.getController(1).getYaw();     
+    			if(dataholder.vrSettings.vehicleRotation){
+    				//tank controls
+    				float end = this.getYRot() % 360;
+    				float start = yaw;
+    				float difference = Math.abs(end - start);
+
+    				if (difference > 180)
+    					if (end > start)
+    						start += 360;
+    					else
+    						end += 360;
+
+    				difference = end - start;
+
+    				f = 0;
+
+    				if (Math.abs(difference) < 30){
+    					f = 0.04f;
+    				} 
+    				else if (Math.abs(difference) > 150) {
+    					f = -0.005F;
+    				}
+    				else if(difference < 0){
+    					this.deltaRotation +=1;
+    					f = 0.005f;
+    				} else if(difference > 0) {
+    					this.deltaRotation -=1;
+    					f = 0.005f;
+    				}
+
+     				mx = (double)(Math.sin(-this.getYRot()* 0.017453292F) * f);
+    				mz = (double)(Math.cos(this.getYRot() * 0.017453292F) * f);
+    			} else {
+    				//point to move
+    				mx = (double)(Math.sin(-yaw* 0.017453292F) * f);
+    				mz = (double)(Math.cos(yaw * 0.017453292F) * f);
+    				this.setYRot(yaw);
+    			}
+    			
+
+    		} else {
+    			//roomscale or vanilla behavior
+    			if(minecraft.rowTracker.isRowing() && !dataholder.vrSettings.seated){
+    			
+    				this.deltaRotation += minecraft.rowTracker.LOar / 1.5;
+    				this.deltaRotation -= minecraft.rowTracker.ROar / 1.5;
+    				/*
+    				this.deltaRotation += mc.rowTracker.forces[0] *50;
+    				this.deltaRotation -= mc.rowTracker.forces[1] *50;
+    				 */
+    				
+    				if (deltaRotation < 0) this.inputLeft = true;
+    				if (deltaRotation > 0) this.inputRight = true;
+
+    				f = 0.06f * minecraft.rowTracker.Foar;
+    				if(f > 0) this.inputUp = true;
+    				
+    				/*
+    				f=(float)(mc.rowTracker.forces[0] + mc.rowTracker.forces[1]);
+    				if(f > 0.005) this.forwardInputDown = true;
+    				*/
+
+    				mx= (double)(Math.sin(-this.getYRot() * 0.017453292F) * f);
+    				mz= (double)(Math.cos(this.getYRot() * 0.017453292F) * f);
+    			}else{
+    				//default boat (seated mode)
+    				mx= (double)(Math.sin(-this.getYRot() * 0.017453292F) * f);
+    				mz= (double)(Math.cos(this.getYRot() * 0.017453292F) * f);
+    			}
+    		}
+            this.setDeltaMovement(this.getDeltaMovement().x + mx, this.getDeltaMovement().y, this.getDeltaMovement().z + mz);
+    		//  
+            
             this.setPaddleState(this.inputRight && !this.inputLeft || this.inputUp, this.inputLeft && !this.inputRight || this.inputUp);
         }
     }
@@ -1055,6 +1147,17 @@
         return new ItemStack(this.getDropItem());
     }
 
+    protected void addPassenger(Entity pPassenger)
+    {
+        super.addPassenger(pPassenger);
+
+        if (this.isControlledByLocalInstance() && this.lerpSteps > 0)
+        {
+            this.lerpSteps = 0;
+            this.absMoveTo(this.lerpX, this.lerpY, this.lerpZ, (float)this.lerpYRot, (float)this.lerpXRot);
+        }
+    }
+
     public static enum Status
     {
         IN_WATER,
