--- a/com/mojang/blaze3d/pipeline/RenderTarget.java
+++ b/com/mojang/blaze3d/pipeline/RenderTarget.java
@@ -11,6 +11,11 @@
 import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.math.Matrix4f;
 import java.nio.IntBuffer;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL43;
+
 import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.ShaderInstance;
@@ -36,8 +41,19 @@
         return new float[]{1.0F, 1.0F, 1.0F, 0.0F};
     });
     public int filterMode;
-    private boolean stencilEnabled = false;
-
+    public boolean stencilEnabled = true;
+    //Vivecraft
+    public static final int NO_TEXTURE_ID = -1;
+    private int texid = -1;
+    public String name = "Default";
+    private boolean linearFilter;
+    public int getDepthBufferId() {
+		return depthBufferId;
+	}
+	public void setDepthBufferId(int depthBufferId) {
+		this.depthBufferId = depthBufferId;
+	}
+    ////
     public RenderTarget(boolean pUseDepth)
     {
         this.useDepth = pUseDepth;
@@ -143,14 +159,26 @@
             else
             {
                 this.frameBufferId = GlStateManager.glGenFramebuffers();
-                this.colorTextureId = TextureUtil.generateTextureId();
-
+                
+                //Vivecraft
+                //this.colorTextureId = TextureUtil.generateTextureId();
+                
+                if (this.texid == -1)
+                {
+                	this.colorTextureId = TextureUtil.generateTextureId();
+                }
+                else
+                {
+                	this.colorTextureId = this.texid;
+                }
+                //
+                
                 if (this.useDepth)
                 {
                     this.depthBufferId = TextureUtil.generateTextureId();
                     GlStateManager._bindTexture(this.depthBufferId);
-                    GlStateManager._texParameter(3553, 10241, 9728);
-                    GlStateManager._texParameter(3553, 10240, 9728);
+                    GlStateManager._texParameter(3553, 10241, linearFilter ? GL11.GL_LINEAR : 9728);
+                    GlStateManager._texParameter(3553, 10240, linearFilter ? GL11.GL_LINEAR : 9728);
                     GlStateManager._texParameter(3553, 34892, 0);
                     GlStateManager._texParameter(3553, 10242, 33071);
                     GlStateManager._texParameter(3553, 10243, 33071);
@@ -165,10 +193,14 @@
                     }
                 }
 
-                this.setFilterMode(9728);
+            	if (linearFilter)
+            		this.setFilterMode(GL11.GL_LINEAR);
+            	else
+            		this.setFilterMode(9728);
+            	
                 GlStateManager._bindTexture(this.colorTextureId);
                 GlStateManager._texParameter(3553, 10242, 33071);
-                GlStateManager._texParameter(3553, 10243, 33071);
+                GlStateManager._texParameter(3553, 10243, 33071); //wut r u
                 GlStateManager._texImage2D(3553, 0, 32856, this.width, this.height, 0, 6408, 5121, (IntBuffer)null);
                 GlStateManager._glBindFramebuffer(36160, this.frameBufferId);
                 GlStateManager._glFramebufferTexture2D(36160, 36064, 3553, this.colorTextureId, 0);
@@ -253,6 +285,10 @@
                 throw new RuntimeException("glCheckFramebufferStatus returned unknown status:" + i);
             }
         }
+        else
+        {
+            System.out.println("Framebuffer complete " + this.name);
+        }
     }
 
     public void bindRead()
@@ -276,17 +312,19 @@
         {
             RenderSystem.recordRenderCall(() ->
             {
-                this._bindWrite(pSetViewport);
+                this._bindWrite(true);
             });
         }
         else
         {
-            this._bindWrite(pSetViewport);
+            this._bindWrite(true);
         }
     }
 
     private void _bindWrite(boolean pSetViewport)
     {
+    	//vivecraft its easier to just always set the viewport.
+    	pSetViewport = true;
         if (GLX.isUsingFBOs())
         {
             RenderSystem.assertOnRenderThreadOrInit();
@@ -329,8 +367,8 @@
     {
         this.blitToScreen(pWidth, pHeight, true);
     }
-
-    public void blitToScreen(int pWidth, int pHeight, boolean pDisableBlend)
+	//Vivecraft add x/y offsets
+    public void blitToScreen(int left, int width, int height, int top, boolean disableBlend, float xCropFactor, float yCropFactor, boolean keepAspect)
     {
         RenderSystem.assertOnGameThreadOrInit();
 
@@ -338,16 +376,18 @@
         {
             RenderSystem.recordRenderCall(() ->
             {
-                this._blitToScreen(pWidth, pHeight, pDisableBlend);
+                this._blitToScreen(left, width, height, top, disableBlend, xCropFactor, yCropFactor, keepAspect);
             });
         }
         else
         {
-            this._blitToScreen(pWidth, pHeight, pDisableBlend);
+            this._blitToScreen(left, width, height, top, disableBlend, xCropFactor, yCropFactor, keepAspect);
         }
     }
 
-    private void _blitToScreen(int pWidth, int pHeight, boolean pDisableBlend)
+    public boolean blitLegacy = false;
+    
+    private void _blitToScreen(int left, int width, int height, int top, boolean pDisableBlend, float xCropFactor, float yCropFactor, boolean keepAspect)
     {
         if (GLX.isUsingFBOs())
         {
@@ -355,7 +395,7 @@
             GlStateManager._colorMask(true, true, true, false);
             GlStateManager._disableDepthTest();
             GlStateManager._depthMask(false);
-            GlStateManager._viewport(0, 0, pWidth, pHeight);
+            GlStateManager._viewport(left, top, width, height);
 
             if (pDisableBlend)
             {
@@ -363,36 +403,92 @@
             }
 
             Minecraft minecraft = Minecraft.getInstance();
-            ShaderInstance shaderinstance = minecraft.gameRenderer.blitShader;
-            shaderinstance.setSampler("DiffuseSampler", this.colorTextureId);
-            Matrix4f matrix4f = Matrix4f.orthographic((float)pWidth, (float)(-pHeight), 1000.0F, 3000.0F);
-            RenderSystem.setProjectionMatrix(matrix4f);
-
-            if (shaderinstance.MODEL_VIEW_MATRIX != null)
-            {
-                shaderinstance.MODEL_VIEW_MATRIX.set(Matrix4f.createTranslateMatrix(0.0F, 0.0F, -2000.0F));
-            }
-
-            if (shaderinstance.PROJECTION_MATRIX != null)
-            {
-                shaderinstance.PROJECTION_MATRIX.set(matrix4f);
-            }
-
-            shaderinstance.apply();
-            float f = (float)pWidth;
-            float f1 = (float)pHeight;
-            float f2 = (float)this.viewWidth / (float)this.width;
-            float f3 = (float)this.viewHeight / (float)this.height;
-            Tesselator tesselator = RenderSystem.renderThreadTesselator();
-            BufferBuilder bufferbuilder = tesselator.getBuilder();
-            bufferbuilder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
-            bufferbuilder.vertex(0.0D, (double)f1, 0.0D).uv(0.0F, 0.0F).color(255, 255, 255, 255).endVertex();
-            bufferbuilder.vertex((double)f, (double)f1, 0.0D).uv(f2, 0.0F).color(255, 255, 255, 255).endVertex();
-            bufferbuilder.vertex((double)f, 0.0D, 0.0D).uv(f2, f3).color(255, 255, 255, 255).endVertex();
-            bufferbuilder.vertex(0.0D, 0.0D, 0.0D).uv(0.0F, f3).color(255, 255, 255, 255).endVertex();
-            bufferbuilder.end();
-            BufferUploader._endInternal(bufferbuilder);
-            shaderinstance.clear();
+                       
+            float f = (float)width / (float)height;
+            float f1 = (float)this.viewWidth / (float)this.viewHeight;
+            float f2 = (float)width;
+            float f3 = (float)height;
+            float f4 = 0.0F;
+            float f5 = 0.0F;
+
+            if (keepAspect)
+            {
+            	if (f > f1)
+            	{
+            		float f6 = (float)width / (float)this.viewWidth;
+            		f4 = 0.0F;
+            		f2 = (float)width;
+            		f5 = (float)height / 2.0F - (float)this.viewHeight / 2.0F * f6;
+            		f3 = (float)height / 2.0F + (float)this.viewHeight / 2.0F * f6;
+            	}
+            	else
+            	{
+            		float f10 = (float)height / (float)this.viewHeight;
+            		f4 = (float)width / 2.0F - (float)this.viewWidth / 2.0F * f10;
+            		f2 = (float)width / 2.0F + (float)this.viewWidth / 2.0F * f10;
+            		f5 = 0.0F;
+            		f3 = (float)height;
+            	}
+            }
+            
+            float f11 = (float)width;
+            float f7 = (float)height;
+            float f8 = (float)this.viewWidth / (float)this.width;
+            float f9 = (float)this.viewHeight / (float)this.height;
+            
+            if(!blitLegacy) {
+                ShaderInstance shaderinstance = minecraft.gameRenderer.blitShader;
+            	shaderinstance.setSampler("DiffuseSampler", this.colorTextureId);
+            	Matrix4f matrix4f = Matrix4f.orthographic((float)width, (float)(-height), 1000.0F, 3000.0F);
+            	RenderSystem.setProjectionMatrix(matrix4f);
+
+            	if (shaderinstance.MODEL_VIEW_MATRIX != null)
+            	{
+            		shaderinstance.MODEL_VIEW_MATRIX.set(Matrix4f.createTranslateMatrix(0.0F, 0.0F, -2000.0F));
+            	}
+
+            	if (shaderinstance.PROJECTION_MATRIX != null)
+            	{
+            		shaderinstance.PROJECTION_MATRIX.set(matrix4f);
+            	}
+
+            	shaderinstance.apply();
+            	
+                Tesselator tesselator = RenderSystem.renderThreadTesselator();
+                BufferBuilder bufferbuilder = tesselator.getBuilder();
+        		bufferbuilder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
+        		bufferbuilder.vertex((double)f4, (double)f3, 0.0D).uv(xCropFactor, yCropFactor).color(255, 255, 255, 255).endVertex();
+        		bufferbuilder.vertex((double)f2, (double)f3, 0.0D).uv(f8 - xCropFactor, yCropFactor).color(255, 255, 255, 255).endVertex();
+        		bufferbuilder.vertex((double)f2, (double)f5, 0.0D).uv(f8 - xCropFactor, f9 - yCropFactor).color(255, 255, 255, 255).endVertex();
+        		bufferbuilder.vertex((double)f4, (double)f5, 0.0D).uv(xCropFactor, f9 - yCropFactor).color(255, 255, 255, 255).endVertex();
+                bufferbuilder.end();
+                BufferUploader._endInternal(bufferbuilder);
+              	shaderinstance.clear();
+            } else {
+            	this.bindRead();
+                GlStateManager.disableAlphaTest();
+                GlStateManager._disableBlend();
+                GL11.glMatrixMode(GL11.GL_PROJECTION);
+                GL43.glLoadIdentity();
+                GL11.glOrtho(0.0D, (double)width, (double)height, 0.0D, 1000.0D, 3000.0D);
+                GL43.glMatrixMode(5888);
+                GL43.glLoadIdentity();
+                GL11.glTranslatef(0.0F, 0.0F, -2000);
+                GlStateManager._clearColor(1.0F, 1.0F, 1.0F, 1.0F);
+                GlStateManager._clearDepth(1.0D);
+                GL11.glBegin(GL11.GL_QUADS);
+                GL11.glTexCoord2f(xCropFactor, yCropFactor);
+                GL11.glVertex3f(f4, f3, 0.0F);
+                GL11.glTexCoord2f(f8 - xCropFactor, yCropFactor);
+                GL11.glVertex3f(f2, f3, 0.0F);
+                GL11.glTexCoord2f(f8 - xCropFactor, f9 - yCropFactor);
+                GL11.glVertex3f(f2, f5, 0.0F);
+                GL11.glTexCoord2f(xCropFactor, f9 - yCropFactor);
+                GL11.glVertex3f(f4, f5, 0.0F);
+                GL11.glEnd();
+              	unbindRead();
+            }
+          
             GlStateManager._depthMask(true);
             GlStateManager._colorMask(true, true, true, true);
         }
@@ -425,17 +521,52 @@
         return this.depthBufferId;
     }
 
-    public void enableStencil()
+    public RenderTarget(String name, int width, int height, boolean usedepth, boolean onMac, int texid, boolean depthtex, boolean linearFilter)
+    {
+        RenderSystem.assertOnRenderThreadOrInit();
+        this.name = name;
+        this.texid = texid;
+        this.linearFilter = linearFilter;
+        this.useDepth = usedepth;
+        this.frameBufferId = -1;
+        this.colorTextureId = -1;
+        this.depthBufferId = -1;
+        this.resize(width, height, onMac);
+    }
+
+    public void genMipMaps()
     {
-        if (!this.stencilEnabled)
+        GL30.glGenerateMipmap(3553);
+    }
+
+    public void blitToScreen(int pWidth, int pHeight, boolean p_83960_)
+    {
+        this.blitToScreen(0, pWidth, pHeight, 0, p_83960_, 0.0F, 0.0F, false);
+    }
+
+    public String toString()
+    {
+        StringBuilder stringbuilder = new StringBuilder();
+        stringbuilder.append("\n");
+
+        if (this.name != null)
         {
-            this.stencilEnabled = true;
-            this.resize(this.viewWidth, this.viewHeight, Minecraft.ON_OSX);
+            stringbuilder.append("Name:   " + this.name).append("\n");
         }
+
+        stringbuilder.append("Size:   " + this.viewWidth + " x " + this.viewHeight).append("\n");
+        stringbuilder.append("FB ID:  " + this.frameBufferId).append("\n");
+        stringbuilder.append("Tex ID: " + this.colorTextureId).append("\n");
+        return stringbuilder.toString();
+    }
+
+    public void enableStencil()
+    {
+    	//Vivecraft noop
     }
 
     public boolean isStencilEnabled()
     {
-        return this.stencilEnabled;
+        return true;
     }
 }
